R Notebook
This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Ctrl+Shift+Enter.
plot(cars)
 
Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Ctrl+Shift+K to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
sink("notes_youtube11thmay.doc") 

# create and store results on word document  in working directory

# sink()

# stop storing the results on working directory
# result will be shown in console
getwd()
## [1] "C:/Users/maniv/Documents/R practice"
setwd("C:/Users/maniv/Documents/R practice")
# checking the packages installed


library("dplyr")
library(ggplot2)
data(iris)
view(iris)
head(iris)
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa
str(iris)
## 'data.frame':    150 obs. of  5 variables:
##  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
##  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
##  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
##  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
##  $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
citation()
## To cite R in publications use:
## 
##   R Core Team (2023). _R: A Language and Environment for Statistical
##   Computing_. R Foundation for Statistical Computing, Vienna, Austria.
##   <https://www.R-project.org/>.
## 
## A BibTeX entry for LaTeX users is
## 
##   @Manual{,
##     title = {R: A Language and Environment for Statistical Computing},
##     author = {{R Core Team}},
##     organization = {R Foundation for Statistical Computing},
##     address = {Vienna, Austria},
##     year = {2023},
##     url = {https://www.R-project.org/},
##   }
## 
## We have invested a lot of time and effort in creating R, please cite it
## when using it for data analysis. See also 'citation("pkgname")' for
## citing R packages.
summarise(iris,Species)
## Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in
## dplyr 1.1.0.
## ℹ Please use `reframe()` instead.
## ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`
##   always returns an ungrouped data frame and adjust accordingly.
## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was
## generated.
##        Species
## 1       setosa
## 2       setosa
## 3       setosa
## 4       setosa
## 5       setosa
## 6       setosa
## 7       setosa
## 8       setosa
## 9       setosa
## 10      setosa
## 11      setosa
## 12      setosa
## 13      setosa
## 14      setosa
## 15      setosa
## 16      setosa
## 17      setosa
## 18      setosa
## 19      setosa
## 20      setosa
## 21      setosa
## 22      setosa
## 23      setosa
## 24      setosa
## 25      setosa
## 26      setosa
## 27      setosa
## 28      setosa
## 29      setosa
## 30      setosa
## 31      setosa
## 32      setosa
## 33      setosa
## 34      setosa
## 35      setosa
## 36      setosa
## 37      setosa
## 38      setosa
## 39      setosa
## 40      setosa
## 41      setosa
## 42      setosa
## 43      setosa
## 44      setosa
## 45      setosa
## 46      setosa
## 47      setosa
## 48      setosa
## 49      setosa
## 50      setosa
## 51  versicolor
## 52  versicolor
## 53  versicolor
## 54  versicolor
## 55  versicolor
## 56  versicolor
## 57  versicolor
## 58  versicolor
## 59  versicolor
## 60  versicolor
## 61  versicolor
## 62  versicolor
## 63  versicolor
## 64  versicolor
## 65  versicolor
## 66  versicolor
## 67  versicolor
## 68  versicolor
## 69  versicolor
## 70  versicolor
## 71  versicolor
## 72  versicolor
## 73  versicolor
## 74  versicolor
## 75  versicolor
## 76  versicolor
## 77  versicolor
## 78  versicolor
## 79  versicolor
## 80  versicolor
## 81  versicolor
## 82  versicolor
## 83  versicolor
## 84  versicolor
## 85  versicolor
## 86  versicolor
## 87  versicolor
## 88  versicolor
## 89  versicolor
## 90  versicolor
## 91  versicolor
## 92  versicolor
## 93  versicolor
## 94  versicolor
## 95  versicolor
## 96  versicolor
## 97  versicolor
## 98  versicolor
## 99  versicolor
## 100 versicolor
## 101  virginica
## 102  virginica
## 103  virginica
## 104  virginica
## 105  virginica
## 106  virginica
## 107  virginica
## 108  virginica
## 109  virginica
## 110  virginica
## 111  virginica
## 112  virginica
## 113  virginica
## 114  virginica
## 115  virginica
## 116  virginica
## 117  virginica
## 118  virginica
## 119  virginica
## 120  virginica
## 121  virginica
## 122  virginica
## 123  virginica
## 124  virginica
## 125  virginica
## 126  virginica
## 127  virginica
## 128  virginica
## 129  virginica
## 130  virginica
## 131  virginica
## 132  virginica
## 133  virginica
## 134  virginica
## 135  virginica
## 136  virginica
## 137  virginica
## 138  virginica
## 139  virginica
## 140  virginica
## 141  virginica
## 142  virginica
## 143  virginica
## 144  virginica
## 145  virginica
## 146  virginica
## 147  virginica
## 148  virginica
## 149  virginica
## 150  virginica
# check unique variables

unique(iris$Species)
## [1] setosa     versicolor virginica 
## Levels: setosa versicolor virginica
mean(iris$Sepal.Length)
## [1] 5.843333
# not working
 #iris  %>% mean(Sepal.Length) 
# mean_spl<- mean(iris,Sepal.Length) 

# working

mean_spl<- mean(iris$Sepal.Length) 
mean_spl
## [1] 5.843333
# create new variable mean_spw
summarize(iris,mean_spw=mean(Sepal.Width)) 
##   mean_spw
## 1 3.057333
max(iris$Sepal.Width)
## [1] 4.4
max_spw<-(iris$Sepal.Length)
max_spw
##   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1
##  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0
##  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5
##  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1
##  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5
##  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3
## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2
## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8
## [145] 6.7 6.7 6.3 6.5 6.2 5.9
min(iris$Sepal.Length)
## [1] 4.3
median(iris$Sepal.Length)
## [1] 5.8
#standard deviation
sd_ir<-sd(iris$Sepal.Length)
sd_ir
## [1] 0.8280661
#coefficient of variation spread of data relative to mean
cv_ir<- sd_ir/mean_spl
cv_ir
## [1] 0.1417113
count(iris,Species)
##      Species  n
## 1     setosa 50
## 2 versicolor 50
## 3  virginica 50
count(iris,Sepal.Length)
##    Sepal.Length  n
## 1           4.3  1
## 2           4.4  3
## 3           4.5  1
## 4           4.6  4
## 5           4.7  2
## 6           4.8  5
## 7           4.9  6
## 8           5.0 10
## 9           5.1  9
## 10          5.2  4
## 11          5.3  1
## 12          5.4  6
## 13          5.5  7
## 14          5.6  6
## 15          5.7  8
## 16          5.8  7
## 17          5.9  3
## 18          6.0  6
## 19          6.1  6
## 20          6.2  4
## 21          6.3  9
## 22          6.4  7
## 23          6.5  5
## 24          6.6  2
## 25          6.7  8
## 26          6.8  3
## 27          6.9  4
## 28          7.0  1
## 29          7.1  1
## 30          7.2  3
## 31          7.3  1
## 32          7.4  1
## 33          7.6  1
## 34          7.7  4
## 35          7.9  1
count_splen <- count(iris,Sepal.Length)
count_splen
##    Sepal.Length  n
## 1           4.3  1
## 2           4.4  3
## 3           4.5  1
## 4           4.6  4
## 5           4.7  2
## 6           4.8  5
## 7           4.9  6
## 8           5.0 10
## 9           5.1  9
## 10          5.2  4
## 11          5.3  1
## 12          5.4  6
## 13          5.5  7
## 14          5.6  6
## 15          5.7  8
## 16          5.8  7
## 17          5.9  3
## 18          6.0  6
## 19          6.1  6
## 20          6.2  4
## 21          6.3  9
## 22          6.4  7
## 23          6.5  5
## 24          6.6  2
## 25          6.7  8
## 26          6.8  3
## 27          6.9  4
## 28          7.0  1
## 29          7.1  1
## 30          7.2  3
## 31          7.3  1
## 32          7.4  1
## 33          7.6  1
## 34          7.7  4
## 35          7.9  1
filter(iris,Sepal.Length==5.0)
##    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
## 1             5         3.6          1.4         0.2     setosa
## 2             5         3.4          1.5         0.2     setosa
## 3             5         3.0          1.6         0.2     setosa
## 4             5         3.4          1.6         0.4     setosa
## 5             5         3.2          1.2         0.2     setosa
## 6             5         3.5          1.3         0.3     setosa
## 7             5         3.5          1.6         0.6     setosa
## 8             5         3.3          1.4         0.2     setosa
## 9             5         2.0          3.5         1.0 versicolor
## 10            5         2.3          3.3         1.0 versicolor
filter(iris,Sepal.Length ==5.0,Species=="setosa")
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1            5         3.6          1.4         0.2  setosa
## 2            5         3.4          1.5         0.2  setosa
## 3            5         3.0          1.6         0.2  setosa
## 4            5         3.4          1.6         0.4  setosa
## 5            5         3.2          1.2         0.2  setosa
## 6            5         3.5          1.3         0.3  setosa
## 7            5         3.5          1.6         0.6  setosa
## 8            5         3.3          1.4         0.2  setosa
filter(iris,Sepal.Length>5,Sepal.Width<4,Species=="setosa")
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1           5.1         3.5          1.4         0.2  setosa
## 2           5.4         3.9          1.7         0.4  setosa
## 3           5.4         3.7          1.5         0.2  setosa
## 4           5.4         3.9          1.3         0.4  setosa
## 5           5.1         3.5          1.4         0.3  setosa
## 6           5.7         3.8          1.7         0.3  setosa
## 7           5.1         3.8          1.5         0.3  setosa
## 8           5.4         3.4          1.7         0.2  setosa
## 9           5.1         3.7          1.5         0.4  setosa
## 10          5.1         3.3          1.7         0.5  setosa
## 11          5.2         3.5          1.5         0.2  setosa
## 12          5.2         3.4          1.4         0.2  setosa
## 13          5.4         3.4          1.5         0.4  setosa
## 14          5.5         3.5          1.3         0.2  setosa
## 15          5.1         3.4          1.5         0.2  setosa
## 16          5.1         3.8          1.9         0.4  setosa
## 17          5.1         3.8          1.6         0.2  setosa
## 18          5.3         3.7          1.5         0.2  setosa
# create dataset
mymatrix<-matrix(1:9,nrow =3)
mymatrix
##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9
# sum of rows
apply(mymatrix,1,sum)
## [1] 12 15 18
# another method
rowSums(mymatrix)
## [1] 12 15 18
#sum of columns
apply(mymatrix,2,sum)
## [1]  6 15 24
#another method

colSums(mymatrix)
## [1]  6 15 24
# adding NA to the dataset

mymatrix[3,2] <- NA
mymatrix
##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3   NA    9
apply(mymatrix,2,sum) # 2nd column not summed due to NA
## [1]  6 NA 24
#remove NA and do sum similar for row

apply(mymatrix,2,sum,na.rm=TRUE)
## [1]  6  9 24
apply(mymatrix,1,sum)
## [1] 12 15 NA
apply(mymatrix,1,sum,na.rm=TRUE)
## [1] 12 15 12
mylist<-c(A=matrix(1:9,nrow=3),B=(1:4),C=40)
mylist
## A1 A2 A3 A4 A5 A6 A7 A8 A9 B1 B2 B3 B4  C 
##  1  2  3  4  5  6  7  8  9  1  2  3  4 40
lapply(mylist,"sum")
## $A1
## [1] 1
## 
## $A2
## [1] 2
## 
## $A3
## [1] 3
## 
## $A4
## [1] 4
## 
## $A5
## [1] 5
## 
## $A6
## [1] 6
## 
## $A7
## [1] 7
## 
## $A8
## [1] 8
## 
## $A9
## [1] 9
## 
## $B1
## [1] 1
## 
## $B2
## [1] 2
## 
## $B3
## [1] 3
## 
## $B4
## [1] 4
## 
## $C
## [1] 40
sapply(mylist,"sum")
## A1 A2 A3 A4 A5 A6 A7 A8 A9 B1 B2 B3 B4  C 
##  1  2  3  4  5  6  7  8  9  1  2  3  4 40
unlist(lapply,"sum")
## function (X, FUN, ...) 
## {
##     FUN <- match.fun(FUN)
##     if (!is.vector(X) || is.object(X)) 
##         X <- as.list(X)
##     .Internal(lapply(X, FUN))
## }
## <bytecode: 0x000002564dba23b8>
## <environment: namespace:base>
# each element multiply

lapply(mylist,function(x) x*10)
## $A1
## [1] 10
## 
## $A2
## [1] 20
## 
## $A3
## [1] 30
## 
## $A4
## [1] 40
## 
## $A5
## [1] 50
## 
## $A6
## [1] 60
## 
## $A7
## [1] 70
## 
## $A8
## [1] 80
## 
## $A9
## [1] 90
## 
## $B1
## [1] 10
## 
## $B2
## [1] 20
## 
## $B3
## [1] 30
## 
## $B4
## [1] 40
## 
## $C
## [1] 400
# replication repeated
rep(1,6)
## [1] 1 1 1 1 1 1
rep(1:6)
## [1] 1 2 3 4 5 6
runif(1:6)
## [1] 0.59098551 0.18708879 0.85627295 0.29482925 0.72139266 0.02280213
mapply(rep,1:4,4:1)
## [[1]]
## [1] 1 1 1 1
## 
## [[2]]
## [1] 2 2 2
## 
## [[3]]
## [1] 3 3
## 
## [[4]]
## [1] 4
#iteration of vectors not working function
x<-c(a=10,b=20,c=30)
x
##  a  b  c 
## 10 20 30
y<-c(p=40,q=50,r=60)
y
##  p  q  r 
## 40 50 60
`
simplfy<-function(u,v){
  (u+v)*2
}
simplfy(x,y)
##   a   b   c 
## 100 140 180
# get mean at the time for 2 variable
tapply(iris$Sepal.Length,iris$Sepal.Width,mean)
##        2      2.2      2.3      2.4      2.5      2.6      2.7      2.8 
## 5.000000 6.066667 5.325000 5.300000 5.762500 6.160000 5.855556 6.335714 
##      2.9        3      3.1      3.2      3.3      3.4      3.5      3.6 
## 6.060000 6.015385 6.036364 5.884615 6.016667 5.316667 5.150000 5.425000 
##      3.7      3.8      3.9        4      4.1      4.2      4.4 
## 5.266667 6.100000 5.400000 5.800000 5.200000 5.500000 5.700000
tapply(iris$Sepal.Length,iris$Sepal.Width,max)
##   2 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9   3 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9   4 
## 5.0 6.2 6.3 5.5 6.7 7.7 6.4 7.7 7.3 7.7 6.9 7.2 6.7 6.3 5.5 7.2 5.4 7.9 5.4 5.8 
## 4.1 4.2 4.4 
## 5.2 5.5 5.7
# dplyr data manipulation 
# mutate / summarize
# select /filter /arrange
# rename /group_by / etc.....,
# (dataframe,what to do df)
# argument1,argument2 always return df
library(ggplot2)
data("diamonds")
view(diamonds)
head(diamonds)
## # A tibble: 6 × 10
##   carat cut       color clarity depth table price     x     y     z
##   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
## 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
## 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
## 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
## 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
## 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
## 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
aggregate(price~cut,data=diamonds,mean,na.rm=TRUE)
##         cut    price
## 1      Fair 4358.758
## 2      Good 3928.864
## 3 Very Good 3981.760
## 4   Premium 4584.258
## 5     Ideal 3457.542
aggregate(price~cut+carat, data=diamonds,max,na.rm=TRUE)
##            cut carat price
## 1    Very Good  0.20   367
## 2      Premium  0.20   367
## 3        Ideal  0.20   367
## 4    Very Good  0.21   386
## 5      Premium  0.21   394
## 6         Fair  0.22   337
## 7      Premium  0.22   470
## 8         Fair  0.23   369
## 9         Good  0.23   537
## 10   Very Good  0.23   682
## 11     Premium  0.23   688
## 12       Ideal  0.23   650
## 13        Good  0.24   552
## 14   Very Good  0.24   608
## 15     Premium  0.24   710
## 16       Ideal  0.24   963
## 17        Fair  0.25  1013
## 18        Good  0.25   576
## 19   Very Good  0.25   740
## 20     Premium  0.25  1186
## 21       Ideal  0.25   817
## 22        Good  0.26   724
## 23   Very Good  0.26   769
## 24     Premium  0.26   814
## 25       Ideal  0.26   814
## 26        Fair  0.27   371
## 27        Good  0.27   752
## 28   Very Good  0.27   760
## 29     Premium  0.27   820
## 30       Ideal  0.27   893
## 31        Good  0.28   625
## 32   Very Good  0.28   787
## 33     Premium  0.28   828
## 34       Ideal  0.28   828
## 35        Fair  0.29  1776
## 36        Good  0.29   633
## 37   Very Good  0.29   815
## 38     Premium  0.29   807
## 39       Ideal  0.29   858
## 40        Fair  0.30  1208
## 41        Good  0.30  1026
## 42   Very Good  0.30  2366
## 43     Premium  0.30  1208
## 44       Ideal  0.30  1131
## 45        Fair  0.31   997
## 46        Good  0.31  1052
## 47   Very Good  0.31  1331
## 48     Premium  0.31  1248
## 49       Ideal  0.31  1917
## 50        Fair  0.32  1715
## 51        Good  0.32  1252
## 52   Very Good  0.32  1171
## 53     Premium  0.32  1294
## 54       Ideal  0.32  1359
## 55        Fair  0.33   922
## 56        Good  0.33  1052
## 57   Very Good  0.33  1109
## 58     Premium  0.33  1207
## 59       Ideal  0.33  1389
## 60        Fair  0.34  2160
## 61        Good  0.34   957
## 62   Very Good  0.34  1014
## 63     Premium  0.34  1122
## 64       Ideal  0.34  2346
## 65        Fair  0.35  1415
## 66        Good  0.35   938
## 67   Very Good  0.35  1162
## 68     Premium  0.35  1247
## 69       Ideal  0.35  1672
## 70        Fair  0.36   810
## 71        Good  0.36  1053
## 72   Very Good  0.36  1368
## 73     Premium  0.36  1229
## 74       Ideal  0.36  1718
## 75        Fair  0.37  1440
## 76        Good  0.37   889
## 77   Very Good  0.37  1108
## 78     Premium  0.37  1145
## 79       Ideal  0.37  1764
## 80        Good  0.38  1318
## 81   Very Good  0.38  1421
## 82     Premium  0.38  1400
## 83       Ideal  0.38  1992
## 84        Fair  0.39  1127
## 85        Good  0.39  1255
## 86   Very Good  0.39  1271
## 87     Premium  0.39  1362
## 88       Ideal  0.39  1624
## 89        Fair  0.40  1069
## 90        Good  0.40  1404
## 91   Very Good  0.40  1404
## 92     Premium  0.40  1580
## 93       Ideal  0.40  1908
## 94        Fair  0.41  1089
## 95        Good  0.41  1298
## 96   Very Good  0.41  1376
## 97     Premium  0.41  1582
## 98       Ideal  0.41  1745
## 99        Fair  0.42   675
## 100       Good  0.42  1315
## 101  Very Good  0.42  1722
## 102    Premium  0.42  1400
## 103      Ideal  0.42  1656
## 104       Fair  0.43  1107
## 105       Good  0.43  1167
## 106  Very Good  0.43  1433
## 107    Premium  0.43  1659
## 108      Ideal  0.43  1827
## 109       Good  0.44  2250
## 110  Very Good  0.44  1337
## 111    Premium  0.44  1334
## 112      Ideal  0.44  2506
## 113       Fair  0.45  1227
## 114       Good  0.45  1548
## 115  Very Good  0.45  1327
## 116    Premium  0.45  1736
## 117      Ideal  0.45  1833
## 118       Fair  0.46  1166
## 119       Good  0.46  2139
## 120  Very Good  0.46  1993
## 121    Premium  0.46  1947
## 122      Ideal  0.46  1987
## 123       Fair  0.47  2211
## 124       Good  0.47  1690
## 125  Very Good  0.47  1795
## 126    Premium  0.47  1833
## 127      Ideal  0.47  2460
## 128       Fair  0.48  1367
## 129       Good  0.48  1743
## 130  Very Good  0.48  2677
## 131    Premium  0.48  1323
## 132      Ideal  0.48  2154
## 133       Fair  0.49  1705
## 134       Good  0.49  1738
## 135  Very Good  0.49  1952
## 136    Premium  0.49  1940
## 137      Ideal  0.49  2199
## 138       Fair  0.50  2579
## 139       Good  0.50  3378
## 140  Very Good  0.50  3378
## 141    Premium  0.50  2525
## 142      Ideal  0.50  2889
## 143       Fair  0.51  4368
## 144       Good  0.51  2523
## 145  Very Good  0.51  2925
## 146    Premium  0.51  3360
## 147      Ideal  0.51  3446
## 148       Fair  0.52  2144
## 149       Good  0.52  2093
## 150  Very Good  0.52  2426
## 151    Premium  0.52  2970
## 152      Ideal  0.52  3373
## 153       Fair  0.53  1778
## 154       Good  0.53  2582
## 155  Very Good  0.53  3827
## 156    Premium  0.53  2743
## 157      Ideal  0.53  3812
## 158       Fair  0.54  1944
## 159       Good  0.54  2697
## 160  Very Good  0.54  2356
## 161    Premium  0.54  3194
## 162      Ideal  0.54  4042
## 163       Good  0.55  3509
## 164  Very Good  0.55  2815
## 165    Premium  0.55  3006
## 166      Ideal  0.55  3468
## 167       Fair  0.56  2426
## 168       Good  0.56  1951
## 169  Very Good  0.56  4440
## 170    Premium  0.56  2496
## 171      Ideal  0.56  4632
## 172       Fair  0.57  2805
## 173       Good  0.57  2990
## 174  Very Good  0.57  4032
## 175    Premium  0.57  2753
## 176      Ideal  0.57  3343
## 177       Fair  0.58  2192
## 178       Good  0.58  2494
## 179  Very Good  0.58  2852
## 180    Premium  0.58  2668
## 181      Ideal  0.58  3741
## 182       Fair  0.59  2443
## 183       Good  0.59  2053
## 184  Very Good  0.59  3234
## 185    Premium  0.59  2578
## 186      Ideal  0.59  4916
## 187       Fair  0.60  2484
## 188       Good  0.60  2511
## 189  Very Good  0.60  3333
## 190    Premium  0.60  2560
## 191      Ideal  0.60  4209
## 192       Fair  0.61  1437
## 193       Good  0.61  3807
## 194  Very Good  0.61  3337
## 195    Premium  0.61  2753
## 196      Ideal  0.61  4279
## 197       Fair  0.62  2861
## 198       Good  0.62  2288
## 199  Very Good  0.62  3050
## 200    Premium  0.62  3073
## 201      Ideal  0.62  3968
## 202       Fair  0.63  2011
## 203       Good  0.63  2404
## 204  Very Good  0.63  4800
## 205    Premium  0.63  3675
## 206      Ideal  0.63  6607
## 207       Fair  0.64  2063
## 208       Good  0.64  2980
## 209  Very Good  0.64  3541
## 210    Premium  0.64  2870
## 211      Ideal  0.64  4281
## 212       Fair  0.65  1881
## 213       Good  0.65  2406
## 214  Very Good  0.65  3056
## 215    Premium  0.65  3003
## 216      Ideal  0.65  5052
## 217       Good  0.66  2275
## 218  Very Good  0.66  4311
## 219    Premium  0.66  2861
## 220      Ideal  0.66  3915
## 221       Fair  0.67  1642
## 222       Good  0.67  2479
## 223  Very Good  0.67  3178
## 224    Premium  0.67  2658
## 225      Ideal  0.67  3271
## 226       Fair  0.68  1633
## 227       Good  0.68  3225
## 228  Very Good  0.68  3143
## 229    Premium  0.68  2854
## 230      Ideal  0.68  4325
## 231       Fair  0.69  2235
## 232       Good  0.69  3369
## 233  Very Good  0.69  3323
## 234    Premium  0.69  2045
## 235      Ideal  0.69  3784
## 236       Fair  0.70  3296
## 237       Good  0.70  4407
## 238  Very Good  0.70  4679
## 239    Premium  0.70  5027
## 240      Ideal  0.70  5539
## 241       Fair  0.71  3205
## 242       Good  0.71  4289
## 243  Very Good  0.71  4363
## 244    Premium  0.71  4482
## 245      Ideal  0.71  5019
## 246       Fair  0.72  2879
## 247       Good  0.72  3570
## 248  Very Good  0.72  4847
## 249    Premium  0.72  3951
## 250      Ideal  0.72  5086
## 251       Fair  0.73  3813
## 252       Good  0.73  3616
## 253  Very Good  0.73  4716
## 254    Premium  0.73  3620
## 255      Ideal  0.73  5154
## 256       Fair  0.74  4040
## 257       Good  0.74  4336
## 258  Very Good  0.74  3993
## 259    Premium  0.74  3462
## 260      Ideal  0.74  5841
## 261       Fair  0.75  2940
## 262       Good  0.75  3231
## 263  Very Good  0.75  4889
## 264    Premium  0.75  3822
## 265      Ideal  0.75  5288
## 266       Fair  0.76  2800
## 267       Good  0.76  3950
## 268  Very Good  0.76  4798
## 269    Premium  0.76  4223
## 270      Ideal  0.76  5056
## 271       Fair  0.77  3031
## 272       Good  0.77  3489
## 273  Very Good  0.77  4399
## 274    Premium  0.77  4037
## 275      Ideal  0.77  5251
## 276       Fair  0.78  2721
## 277       Good  0.78  3578
## 278  Very Good  0.78  4904
## 279    Premium  0.78  3538
## 280      Ideal  0.78  4350
## 281       Fair  0.79  2362
## 282       Good  0.79  3436
## 283  Very Good  0.79  4570
## 284    Premium  0.79  4490
## 285      Ideal  0.79  4858
## 286       Fair  0.80  2885
## 287       Good  0.80  4444
## 288  Very Good  0.80  6834
## 289    Premium  0.80  4268
## 290      Ideal  0.80  6674
## 291       Fair  0.81  3323
## 292       Good  0.81  3324
## 293  Very Good  0.81  5423
## 294    Premium  0.81  4284
## 295      Ideal  0.81  6338
## 296       Fair  0.82  3057
## 297       Good  0.82  3363
## 298  Very Good  0.82  4844
## 299    Premium  0.82  3697
## 300      Ideal  0.82  4931
## 301       Fair  0.83  2577
## 302       Good  0.83  3250
## 303  Very Good  0.83  7889
## 304    Premium  0.83  3625
## 305      Ideal  0.83  5151
## 306       Fair  0.84  3172
## 307       Good  0.84  3577
## 308  Very Good  0.84  4869
## 309    Premium  0.84  4365
## 310      Ideal  0.84  6399
## 311       Fair  0.85  2998
## 312       Good  0.85  2945
## 313  Very Good  0.85  4293
## 314    Premium  0.85  4530
## 315      Ideal  0.85  7230
## 316       Fair  0.86  3756
## 317       Good  0.86  5029
## 318  Very Good  0.86  4665
## 319    Premium  0.86  3372
## 320      Ideal  0.86  4420
## 321       Fair  0.87  3166
## 322  Very Good  0.87  3664
## 323    Premium  0.87  4189
## 324      Ideal  0.87  5640
## 325       Fair  0.88  2882
## 326       Good  0.88  2581
## 327  Very Good  0.88  5052
## 328    Premium  0.88  3921
## 329      Ideal  0.88  5595
## 330       Fair  0.89  2579
## 331       Good  0.89  3663
## 332  Very Good  0.89  4003
## 333    Premium  0.89  3489
## 334      Ideal  0.89  4854
## 335       Fair  0.90  5551
## 336       Good  0.90  8239
## 337  Very Good  0.90  9182
## 338    Premium  0.90  7711
## 339      Ideal  0.90  8979
## 340       Fair  0.91  5430
## 341       Good  0.91  5394
## 342  Very Good  0.91  7131
## 343    Premium  0.91  7006
## 344      Ideal  0.91  9636
## 345       Fair  0.92  4482
## 346       Good  0.92  5390
## 347  Very Good  0.92  7544
## 348    Premium  0.92  5358
## 349      Ideal  0.92  6513
## 350       Fair  0.93  5078
## 351       Good  0.93  4611
## 352  Very Good  0.93  5616
## 353    Premium  0.93  5729
## 354      Ideal  0.93  5992
## 355       Fair  0.94  4053
## 356       Good  0.94  4790
## 357  Very Good  0.94  6088
## 358    Premium  0.94  5980
## 359      Ideal  0.94  7120
## 360       Fair  0.95  3384
## 361       Good  0.95  5817
## 362  Very Good  0.95  5572
## 363    Premium  0.95  4682
## 364      Ideal  0.95  6951
## 365       Fair  0.96  4849
## 366       Good  0.96  4693
## 367  Very Good  0.96  5997
## 368    Premium  0.96  4864
## 369      Ideal  0.96  6807
## 370       Fair  0.97  4063
## 371       Good  0.97  4900
## 372  Very Good  0.97  7415
## 373    Premium  0.97  6768
## 374      Ideal  0.97  6801
## 375       Fair  0.98  4281
## 376       Good  0.98  4226
## 377  Very Good  0.98  4826
## 378    Premium  0.98  4623
## 379      Ideal  0.98  4950
## 380       Fair  0.99  3593
## 381       Good  0.99  4052
## 382  Very Good  0.99  6094
## 383    Premium  0.99  5893
## 384      Ideal  0.99  6038
## 385       Fair  1.00 10752
## 386       Good  1.00 15928
## 387  Very Good  1.00 16073
## 388    Premium  1.00 10752
## 389      Ideal  1.00 16469
## 390       Fair  1.01 10011
## 391       Good  1.01 15081
## 392  Very Good  1.01 16087
## 393    Premium  1.01 16234
## 394      Ideal  1.01 12996
## 395       Fair  1.02  7960
## 396       Good  1.02  8011
## 397  Very Good  1.02 17100
## 398    Premium  1.02 15370
## 399      Ideal  1.02 15575
## 400       Fair  1.03  5624
## 401       Good  1.03  7251
## 402  Very Good  1.03 11677
## 403    Premium  1.03 11538
## 404      Ideal  1.03 17590
## 405       Fair  1.04  5633
## 406       Good  1.04  7399
## 407  Very Good  1.04 18542
## 408    Premium  1.04 15671
## 409      Ideal  1.04 14626
## 410       Fair  1.05  7283
## 411       Good  1.05  7826
## 412  Very Good  1.05 11417
## 413    Premium  1.05 11946
## 414      Ideal  1.05 13060
## 415       Fair  1.06  3633
## 416       Good  1.06  7699
## 417  Very Good  1.06 12642
## 418    Premium  1.06  9082
## 419      Ideal  1.06 15813
## 420       Fair  1.07  4554
## 421       Good  1.07  7250
## 422  Very Good  1.07 18114
## 423    Premium  1.07 18279
## 424      Ideal  1.07 17042
## 425       Fair  1.08  7076
## 426       Good  1.08  6708
## 427  Very Good  1.08 10204
## 428    Premium  1.08  8999
## 429      Ideal  1.08 14032
## 430       Fair  1.09  5085
## 431       Good  1.09 16406
## 432  Very Good  1.09 18231
## 433    Premium  1.09 10111
## 434      Ideal  1.09 15193
## 435       Fair  1.10  4725
## 436       Good  1.10  5131
## 437  Very Good  1.10 11132
## 438    Premium  1.10 11233
## 439      Ideal  1.10 12748
## 440       Fair  1.11  5178
## 441       Good  1.11  7863
## 442  Very Good  1.11 12200
## 443    Premium  1.11 13405
## 444      Ideal  1.11 15464
## 445       Fair  1.12  7696
## 446       Good  1.12  8973
## 447  Very Good  1.12  9820
## 448    Premium  1.12 12152
## 449      Ideal  1.12 14407
## 450       Fair  1.13  7335
## 451       Good  1.13  4998
## 452  Very Good  1.13 13111
## 453    Premium  1.13 12722
## 454      Ideal  1.13 14525
## 455       Fair  1.14  6381
## 456       Good  1.14 17499
## 457  Very Good  1.14 18112
## 458    Premium  1.14 11654
## 459      Ideal  1.14 12458
## 460       Fair  1.15  6530
## 461       Good  1.15  5935
## 462  Very Good  1.15 12895
## 463    Premium  1.15  9025
## 464      Ideal  1.15 12447
## 465       Fair  1.16  7094
## 466       Good  1.16  5831
## 467  Very Good  1.16  9205
## 468    Premium  1.16 11717
## 469      Ideal  1.16 13595
## 470       Fair  1.17  6814
## 471       Good  1.17  7972
## 472  Very Good  1.17 10681
## 473    Premium  1.17 10115
## 474      Ideal  1.17 11886
## 475       Fair  1.18  4903
## 476       Good  1.18  6743
## 477  Very Good  1.18 12175
## 478    Premium  1.18  9648
## 479      Ideal  1.18 14847
## 480       Fair  1.19  5622
## 481       Good  1.19  8995
## 482  Very Good  1.19 15767
## 483    Premium  1.19  9263
## 484      Ideal  1.19 15005
## 485       Fair  1.20  5445
## 486       Good  1.20 11182
## 487  Very Good  1.20 13015
## 488    Premium  1.20 15686
## 489      Ideal  1.20 16256
## 490       Fair  1.21  6397
## 491       Good  1.21  9176
## 492  Very Good  1.21 13630
## 493    Premium  1.21 17192
## 494      Ideal  1.21 17353
## 495       Fair  1.22  4705
## 496       Good  1.22  8533
## 497  Very Good  1.22 10719
## 498    Premium  1.22 13824
## 499      Ideal  1.22 14414
## 500       Fair  1.23  3692
## 501       Good  1.23  6545
## 502  Very Good  1.23 15878
## 503    Premium  1.23 11534
## 504      Ideal  1.23 16253
## 505       Fair  1.24  7291
## 506       Good  1.24  9405
## 507  Very Good  1.24 11716
## 508    Premium  1.24 11231
## 509      Ideal  1.24 15026
## 510       Fair  1.25  3990
## 511       Good  1.25  8901
## 512  Very Good  1.25 13953
## 513    Premium  1.25 11088
## 514      Ideal  1.25 16823
## 515       Fair  1.26  4966
## 516       Good  1.26  6874
## 517  Very Good  1.26 14095
## 518    Premium  1.26 14952
## 519      Ideal  1.26 15247
## 520       Fair  1.27  5334
## 521       Good  1.27  5923
## 522  Very Good  1.27 13200
## 523    Premium  1.27 13320
## 524      Ideal  1.27 15377
## 525       Good  1.28  6175
## 526  Very Good  1.28 12285
## 527    Premium  1.28 15806
## 528      Ideal  1.28 18700
## 529       Fair  1.29  4824
## 530       Good  1.29  7828
## 531  Very Good  1.29 17932
## 532    Premium  1.29 10801
## 533      Ideal  1.29 13530
## 534       Fair  1.30  5488
## 535       Good  1.30 12967
## 536  Very Good  1.30 13725
## 537    Premium  1.30 14196
## 538      Ideal  1.30 15874
## 539       Good  1.31  7236
## 540  Very Good  1.31 11108
## 541    Premium  1.31 17496
## 542      Ideal  1.31 13406
## 543       Fair  1.32 12648
## 544       Good  1.32  7143
## 545  Very Good  1.32 14842
## 546    Premium  1.32 11177
## 547      Ideal  1.32 15802
## 548       Fair  1.33  6078
## 549       Good  1.33 11023
## 550  Very Good  1.33  8953
## 551    Premium  1.33 12342
## 552      Ideal  1.33 18435
## 553       Fair  1.34  5106
## 554       Good  1.34  8109
## 555  Very Good  1.34 10771
## 556    Premium  1.34 17663
## 557      Ideal  1.34 14593
## 558       Fair  1.35  7182
## 559       Good  1.35  5610
## 560  Very Good  1.35  9729
## 561    Premium  1.35 11868
## 562      Ideal  1.35 14616
## 563       Fair  1.36  4158
## 564       Good  1.36  7639
## 565  Very Good  1.36 14236
## 566    Premium  1.36 13598
## 567      Ideal  1.36 15386
## 568       Good  1.37  5449
## 569  Very Good  1.37 10226
## 570    Premium  1.37 12713
## 571      Ideal  1.37 13439
## 572       Fair  1.38  4730
## 573       Good  1.38  4598
## 574  Very Good  1.38 17598
## 575    Premium  1.38 10850
## 576      Ideal  1.38 15968
## 577       Good  1.39  7096
## 578  Very Good  1.39 12614
## 579    Premium  1.39 11248
## 580      Ideal  1.39 13061
## 581       Fair  1.40  8216
## 582       Good  1.40 11519
## 583  Very Good  1.40 12196
## 584    Premium  1.40 13730
## 585      Ideal  1.40 16808
## 586       Fair  1.41  4145
## 587       Good  1.41 14853
## 588  Very Good  1.41 14936
## 589    Premium  1.41 17216
## 590      Ideal  1.41 16545
## 591       Fair  1.42  7214
## 592       Good  1.42  9542
## 593  Very Good  1.42 15665
## 594    Premium  1.42 11861
## 595      Ideal  1.42 18682
## 596       Fair  1.43  7928
## 597  Very Good  1.43 10419
## 598    Premium  1.43 13873
## 599      Ideal  1.43 14429
## 600       Fair  1.44  7338
## 601       Good  1.44  9677
## 602  Very Good  1.44 10967
## 603    Premium  1.44 11588
## 604      Ideal  1.44 12093
## 605       Fair  1.45  6455
## 606  Very Good  1.45 17545
## 607    Premium  1.45 11650
## 608      Ideal  1.45  7477
## 609       Fair  1.46  5723
## 610       Good  1.46 11851
## 611  Very Good  1.46  9770
## 612    Premium  1.46 12261
## 613      Ideal  1.46 10302
## 614       Fair  1.47  6108
## 615  Very Good  1.47 12547
## 616    Premium  1.47 11113
## 617      Ideal  1.47  7284
## 618       Good  1.48 15164
## 619  Very Good  1.48  8815
## 620    Premium  1.48  7086
## 621      Ideal  1.48  8818
## 622       Fair  1.49  8779
## 623       Good  1.49  5407
## 624  Very Good  1.49  9552
## 625    Premium  1.49 12900
## 626      Ideal  1.49 18614
## 627       Fair  1.50 16364
## 628       Good  1.50 17449
## 629  Very Good  1.50 18691
## 630    Premium  1.50 17667
## 631      Ideal  1.50 18159
## 632       Fair  1.51 15152
## 633       Good  1.51 17111
## 634  Very Good  1.51 18777
## 635    Premium  1.51 18102
## 636      Ideal  1.51 18806
## 637       Fair  1.52 10623
## 638       Good  1.52 16519
## 639  Very Good  1.52 16786
## 640    Premium  1.52 17723
## 641      Ideal  1.52 17659
## 642       Fair  1.53  8996
## 643       Good  1.53 15619
## 644  Very Good  1.53 17057
## 645    Premium  1.53 16601
## 646      Ideal  1.53 17223
## 647       Fair  1.54 12581
## 648       Good  1.54 12779
## 649  Very Good  1.54 16750
## 650    Premium  1.54 16921
## 651      Ideal  1.54 18416
## 652       Fair  1.55 10217
## 653       Good  1.55 11364
## 654  Very Good  1.55 15658
## 655    Premium  1.55 17773
## 656      Ideal  1.55 18188
## 657       Fair  1.56  7950
## 658       Good  1.56  9784
## 659  Very Good  1.56 15334
## 660    Premium  1.56 14268
## 661      Ideal  1.56 17455
## 662       Fair  1.57  8133
## 663       Good  1.57 12547
## 664  Very Good  1.57 12697
## 665    Premium  1.57 17175
## 666      Ideal  1.57 17548
## 667       Fair  1.58  7333
## 668       Good  1.58  9775
## 669  Very Good  1.58 14308
## 670    Premium  1.58 14855
## 671      Ideal  1.58 18057
## 672       Fair  1.59  7080
## 673       Good  1.59 11716
## 674  Very Good  1.59 13631
## 675    Premium  1.59 17552
## 676      Ideal  1.59 17366
## 677       Fair  1.60  8666
## 678       Good  1.60 12581
## 679  Very Good  1.60 14383
## 680    Premium  1.60 17360
## 681      Ideal  1.60 18780
## 682       Good  1.61 10793
## 683  Very Good  1.61 13047
## 684    Premium  1.61 15426
## 685      Ideal  1.61 18318
## 686       Good  1.62 12429
## 687  Very Good  1.62 14400
## 688    Premium  1.62 16112
## 689      Ideal  1.62 18281
## 690       Good  1.63 13187
## 691  Very Good  1.63 14404
## 692    Premium  1.63 13678
## 693      Ideal  1.63 18179
## 694       Fair  1.64  8954
## 695       Good  1.64 10102
## 696  Very Good  1.64 12779
## 697    Premium  1.64 14330
## 698      Ideal  1.64 17604
## 699       Fair  1.65  5914
## 700  Very Good  1.65 17425
## 701    Premium  1.65 11864
## 702      Ideal  1.65 17729
## 703       Good  1.66 15091
## 704  Very Good  1.66 16294
## 705    Premium  1.66 14354
## 706      Ideal  1.66 15210
## 707       Good  1.67  8013
## 708  Very Good  1.67 17028
## 709    Premium  1.67 11400
## 710      Ideal  1.67 17351
## 711       Good  1.68  5871
## 712  Very Good  1.68 15309
## 713    Premium  1.68 13445
## 714      Ideal  1.68 16985
## 715       Good  1.69 17400
## 716  Very Good  1.69 17803
## 717    Premium  1.69 16583
## 718      Ideal  1.69 16789
## 719       Fair  1.70 14860
## 720       Good  1.70 17597
## 721  Very Good  1.70 18176
## 722    Premium  1.70 18718
## 723      Ideal  1.70 18445
## 724       Fair  1.71  8800
## 725       Good  1.71 14426
## 726  Very Good  1.71 17685
## 727    Premium  1.71 18791
## 728      Ideal  1.71 18768
## 729       Fair  1.72 13622
## 730       Good  1.72 13622
## 731  Very Good  1.72 18557
## 732    Premium  1.72 18730
## 733      Ideal  1.72 18431
## 734       Fair  1.73  6007
## 735       Good  1.73 14479
## 736  Very Good  1.73 18211
## 737    Premium  1.73 18377
## 738      Ideal  1.73 16131
## 739       Good  1.74 16223
## 740  Very Good  1.74 18430
## 741    Premium  1.74 17904
## 742      Ideal  1.74 16316
## 743       Good  1.75 13047
## 744  Very Good  1.75 17036
## 745    Premium  1.75 17191
## 746      Ideal  1.75 17343
## 747       Fair  1.76  9314
## 748  Very Good  1.76 18014
## 749    Premium  1.76 16879
## 750      Ideal  1.76 18178
## 751       Good  1.77  8109
## 752  Very Good  1.77 14561
## 753    Premium  1.77 15278
## 754      Ideal  1.77 13026
## 755       Good  1.78  9071
## 756  Very Good  1.78 13659
## 757    Premium  1.78 15601
## 758      Ideal  1.78 18128
## 759       Good  1.79  9122
## 760  Very Good  1.79 18429
## 761    Premium  1.79 18419
## 762      Ideal  1.79 13908
## 763       Good  1.80 12308
## 764  Very Good  1.80 17273
## 765    Premium  1.80 12338
## 766      Ideal  1.80 16683
## 767       Fair  1.81  8362
## 768       Good  1.81 11336
## 769  Very Good  1.81 14177
## 770    Premium  1.81 13561
## 771       Fair  1.82  5993
## 772  Very Good  1.82 15025
## 773    Premium  1.82 15162
## 774      Ideal  1.82 15802
## 775       Fair  1.83  6887
## 776  Very Good  1.83 18358
## 777    Premium  1.83 18525
## 778      Ideal  1.83 15032
## 779    Premium  1.84 13905
## 780      Ideal  1.84  8828
## 781  Very Good  1.85  5688
## 782      Ideal  1.85 14375
## 783       Good  1.86  9791
## 784  Very Good  1.86 17267
## 785    Premium  1.86 13420
## 786      Ideal  1.86 10312
## 787  Very Good  1.87 14308
## 788    Premium  1.87 16232
## 789      Ideal  1.87 17761
## 790       Good  1.88  8048
## 791  Very Good  1.88 13607
## 792  Very Good  1.89 15594
## 793    Premium  1.89 10055
## 794      Ideal  1.89 17553
## 795       Fair  1.90  8576
## 796  Very Good  1.90  9540
## 797    Premium  1.90 13919
## 798      Ideal  1.90 12443
## 799       Fair  1.91 12244
## 800       Good  1.91 10937
## 801  Very Good  1.91 17509
## 802    Premium  1.91 13367
## 803      Ideal  1.91 12816
## 804  Very Good  1.92 15364
## 805      Ideal  1.92 15472
## 806       Fair  1.93 17995
## 807  Very Good  1.93 13278
## 808    Premium  1.93 17353
## 809      Ideal  1.93 18306
## 810  Very Good  1.94 14489
## 811    Premium  1.94 18735
## 812  Very Good  1.95 17374
## 813    Premium  1.95  5045
## 814       Fair  1.96  6147
## 815  Very Good  1.96 13099
## 816    Premium  1.96  9769
## 817  Very Good  1.97 17377
## 818    Premium  1.97 17535
## 819       Fair  1.98 12923
## 820  Very Good  1.98 15083
## 821    Premium  1.98 16171
## 822      Ideal  1.98 14581
## 823       Fair  1.99 17713
## 824       Good  1.99 13338
## 825    Premium  1.99 11486
## 826       Fair  2.00 18515
## 827       Good  2.00 18376
## 828  Very Good  2.00 18818
## 829    Premium  2.00 18795
## 830      Ideal  2.00 18604
## 831       Fair  2.01 18574
## 832       Good  2.01 18640
## 833  Very Good  2.01 18741
## 834    Premium  2.01 18741
## 835      Ideal  2.01 18741
## 836       Fair  2.02 18565
## 837       Good  2.02 18236
## 838  Very Good  2.02 18731
## 839    Premium  2.02 18678
## 840      Ideal  2.02 18700
## 841       Fair  2.03 16280
## 842       Good  2.03 15898
## 843  Very Good  2.03 18781
## 844    Premium  2.03 18680
## 845      Ideal  2.03 18757
## 846       Fair  2.04 12799
## 847       Good  2.04 18468
## 848  Very Good  2.04 18127
## 849    Premium  2.04 18795
## 850      Ideal  2.04 18663
## 851       Fair  2.05 17408
## 852       Good  2.05 16295
## 853  Very Good  2.05 18152
## 854    Premium  2.05 18784
## 855      Ideal  2.05 18787
## 856       Fair  2.06 14750
## 857       Good  2.06 16512
## 858  Very Good  2.06 18005
## 859    Premium  2.06 18439
## 860      Ideal  2.06 18779
## 861       Fair  2.07 13016
## 862       Good  2.07 18707
## 863  Very Good  2.07 18489
## 864    Premium  2.07 18611
## 865      Ideal  2.07 18804
## 866       Good  2.08 14084
## 867  Very Good  2.08 18405
## 868    Premium  2.08 18447
## 869      Ideal  2.08 18760
## 870       Good  2.09 18472
## 871  Very Good  2.09 18640
## 872    Premium  2.09 18559
## 873      Ideal  2.09 17999
## 874       Fair  2.10 16506
## 875       Good  2.10 12121
## 876  Very Good  2.10 18480
## 877    Premium  2.10 17606
## 878      Ideal  2.10 18648
## 879       Fair  2.11 15282
## 880  Very Good  2.11 18407
## 881    Premium  2.11 18575
## 882      Ideal  2.11 17712
## 883  Very Good  2.12 18118
## 884    Premium  2.12 18656
## 885      Ideal  2.12 17730
## 886       Fair  2.13 13370
## 887       Good  2.13 16062
## 888  Very Good  2.13 16462
## 889    Premium  2.13 17073
## 890      Ideal  2.13 18442
## 891       Fair  2.14 13825
## 892       Good  2.14 14452
## 893  Very Good  2.14 18526
## 894    Premium  2.14 18291
## 895      Ideal  2.14 18528
## 896       Fair  2.15  5430
## 897       Good  2.15 13317
## 898  Very Good  2.15 17065
## 899    Premium  2.15 17221
## 900      Ideal  2.15 18791
## 901       Good  2.16 14266
## 902  Very Good  2.16 18678
## 903    Premium  2.16 18481
## 904      Ideal  2.16 18462
## 905       Fair  2.17  6817
## 906       Good  2.17 16036
## 907  Very Good  2.17 15760
## 908    Premium  2.17 16472
## 909      Ideal  2.17 17805
## 910       Good  2.18 16842
## 911  Very Good  2.18 17475
## 912    Premium  2.18 18717
## 913      Ideal  2.18 16427
## 914       Good  2.19 13978
## 915  Very Good  2.19 18067
## 916    Premium  2.19 18232
## 917      Ideal  2.19 18693
## 918       Fair  2.20  7934
## 919       Good  2.20 13919
## 920  Very Good  2.20 16239
## 921    Premium  2.20 18364
## 922      Ideal  2.20 18168
## 923  Very Good  2.21 18483
## 924    Premium  2.21 17714
## 925      Ideal  2.21 18276
## 926       Fair  2.22 12508
## 927       Good  2.22 17151
## 928  Very Good  2.22 17160
## 929    Premium  2.22 18706
## 930      Ideal  2.22 18531
## 931  Very Good  2.23 14732
## 932    Premium  2.23 18149
## 933  Very Good  2.24 16558
## 934    Premium  2.24 16656
## 935      Ideal  2.24 18299
## 936       Fair  2.25  7069
## 937       Good  2.25 15287
## 938  Very Good  2.25 14775
## 939    Premium  2.25 18034
## 940      Ideal  2.25 17143
## 941       Good  2.26 16241
## 942  Very Good  2.26 18028
## 943    Premium  2.26 18426
## 944      Ideal  2.26 17312
## 945       Fair  2.27  7131
## 946       Good  2.27 17051
## 947    Premium  2.27 17149
## 948      Ideal  2.27 18343
## 949       Good  2.28 14350
## 950  Very Good  2.28 16041
## 951    Premium  2.28 18055
## 952      Ideal  2.28 16969
## 953       Fair  2.29 13701
## 954  Very Good  2.29 18068
## 955    Premium  2.29 18823
## 956      Ideal  2.29 14500
## 957       Good  2.30 12944
## 958  Very Good  2.30 14603
## 959    Premium  2.30 18239
## 960      Ideal  2.30 18304
## 961       Fair  2.31  7257
## 962  Very Good  2.31 17715
## 963    Premium  2.31 17451
## 964       Fair  2.32 18026
## 965       Good  2.32 13654
## 966  Very Good  2.32 18508
## 967    Premium  2.32 18026
## 968      Ideal  2.32 18532
## 969       Good  2.33 13242
## 970  Very Good  2.33 18119
## 971    Premium  2.33 14711
## 972      Ideal  2.33 17504
## 973       Good  2.34 12961
## 974  Very Good  2.34 11119
## 975    Premium  2.34 15818
## 976      Ideal  2.34 11221
## 977  Very Good  2.35 15122
## 978    Premium  2.35 17999
## 979       Good  2.36 12286
## 980    Premium  2.36 18745
## 981      Ideal  2.36 17829
## 982    Premium  2.37 16021
## 983      Ideal  2.37 18508
## 984  Very Good  2.38 16126
## 985    Premium  2.38 18559
## 986  Very Good  2.39 17920
## 987    Premium  2.39 17642
## 988      Ideal  2.39 17955
## 989       Fair  2.40 15824
## 990       Good  2.40 18541
## 991  Very Good  2.40 17955
## 992    Premium  2.40 16797
## 993      Ideal  2.40 18541
## 994       Good  2.41 17923
## 995    Premium  2.41 15320
## 996      Ideal  2.41 16987
## 997    Premium  2.42 18615
## 998      Ideal  2.42 16826
## 999       Fair  2.43 14975
## 1000 Very Good  2.43 16170
## 1001   Premium  2.43 18692
## 1002     Ideal  2.43 17856
## 1003 Very Good  2.44 18430
## 1004   Premium  2.44 13027
## 1005 Very Good  2.45 11843
## 1006     Ideal  2.45 18113
## 1007   Premium  2.46 10470
## 1008     Ideal  2.46 16466
## 1009   Premium  2.47 16532
## 1010     Ideal  2.47 15430
## 1011      Fair  2.48 15030
## 1012 Very Good  2.48 18692
## 1013   Premium  2.48 17607
## 1014     Ideal  2.48 12883
## 1015      Fair  2.49  6289
## 1016   Premium  2.49 18325
## 1017     Ideal  2.49 16915
## 1018      Fair  2.50 17405
## 1019      Good  2.50 18325
## 1020 Very Good  2.50 17028
## 1021   Premium  2.50 18447
## 1022     Ideal  2.50 16955
## 1023      Fair  2.51 18308
## 1024      Good  2.51 14251
## 1025 Very Good  2.51 18090
## 1026   Premium  2.51 18255
## 1027     Ideal  2.51 18037
## 1028      Fair  2.52 15776
## 1029      Good  2.52 17608
## 1030 Very Good  2.52 17689
## 1031   Premium  2.52 18252
## 1032     Ideal  2.52 17231
## 1033      Fair  2.53 17103
## 1034   Premium  2.53 18254
## 1035     Ideal  2.53 16709
## 1036 Very Good  2.54 17996
## 1037   Premium  2.54 14717
## 1038     Ideal  2.54 17339
## 1039      Good  2.55 14775
## 1040   Premium  2.55 18766
## 1041      Good  2.56 15231
## 1042   Premium  2.56 17186
## 1043     Ideal  2.56 17753
## 1044   Premium  2.57 18485
## 1045      Fair  2.58 12500
## 1046 Very Good  2.58 14749
## 1047   Premium  2.58 16195
## 1048     Ideal  2.59 16465
## 1049      Fair  2.60 17027
## 1050   Premium  2.60 17209
## 1051     Ideal  2.60 18369
## 1052      Good  2.61 13784
## 1053     Ideal  2.61 18756
## 1054 Very Good  2.63 10437
## 1055   Premium  2.63 10628
## 1056     Ideal  2.63 16914
## 1057     Ideal  2.64 17407
## 1058   Premium  2.65 16314
## 1059      Good  2.66 18495
## 1060      Good  2.67 18686
## 1061 Very Good  2.68  9665
## 1062   Premium  2.68  8419
## 1063 Very Good  2.70 14341
## 1064   Premium  2.71 17146
## 1065      Fair  2.72  6870
## 1066     Ideal  2.72 17801
## 1067      Fair  2.74  8807
## 1068 Very Good  2.74 17184
## 1069   Premium  2.75 15415
## 1070     Ideal  2.75 13156
## 1071   Premium  2.77 10424
## 1072      Good  2.80 18788
## 1073   Premium  2.80 15030
## 1074      Fair  3.00 16970
## 1075      Good  3.00 14918
## 1076 Very Good  3.00  6512
## 1077   Premium  3.00 16970
## 1078      Fair  3.01 18242
## 1079      Good  3.01 18593
## 1080   Premium  3.01 18710
## 1081     Ideal  3.01 16538
## 1082      Fair  3.02 10577
## 1083 Very Good  3.04 15354
## 1084   Premium  3.04 18559
## 1085   Premium  3.05 10453
## 1086      Fair  3.11  9823
## 1087     Ideal  3.22 12545
## 1088   Premium  3.24 12300
## 1089      Fair  3.40 15964
## 1090     Ideal  3.50 12587
## 1091   Premium  3.51 18701
## 1092      Fair  3.65 11668
## 1093   Premium  3.67 16193
## 1094 Very Good  4.00 15984
## 1095   Premium  4.01 15223
## 1096      Fair  4.13 17329
## 1097      Fair  4.50 18531
## 1098      Fair  5.01 18018
aggregate(cbind(price,carat)~cut+color,data=diamonds,max,na.rm=TRUE)
##          cut color price carat
## 1       Fair     D 16386  3.40
## 2       Good     D 18468  2.04
## 3  Very Good     D 18542  2.58
## 4    Premium     D 18575  2.57
## 5      Ideal     D 18693  2.75
## 6       Fair     E 15584  2.04
## 7       Good     E 18236  3.00
## 8  Very Good     E 18731  2.51
## 9    Premium     E 18477  3.05
## 10     Ideal     E 18729  2.28
## 11      Fair     F 17995  2.58
## 12      Good     F 18686  2.67
## 13 Very Good     F 18777  2.48
## 14   Premium     F 18791  3.01
## 15     Ideal     F 18780  2.45
## 16      Fair     G 18574  2.60
## 17      Good     G 18788  2.80
## 18 Very Good     G 18818  2.52
## 19   Premium     G 18741  3.01
## 20     Ideal     G 18806  2.54
## 21      Fair     H 18565  4.13
## 22      Good     H 18640  3.01
## 23 Very Good     H 18803  3.00
## 24   Premium     H 18795  3.24
## 25     Ideal     H 18760  3.50
## 26      Fair     I 18242  3.02
## 27      Good     I 18707  3.01
## 28 Very Good     I 18500  4.00
## 29   Premium     I 18823  4.01
## 30     Ideal     I 18779  3.22
## 31      Fair     J 18531  5.01
## 32      Good     J 18325  3.00
## 33 Very Good     J 18430  2.74
## 34   Premium     J 18710  4.01
## 35     Ideal     J 18508  3.01
data("mtcars")
view(mtcars)
# choosing the variable names by index

select(mtcars,5:7,2)
##                     drat    wt  qsec cyl
## Mazda RX4           3.90 2.620 16.46   6
## Mazda RX4 Wag       3.90 2.875 17.02   6
## Datsun 710          3.85 2.320 18.61   4
## Hornet 4 Drive      3.08 3.215 19.44   6
## Hornet Sportabout   3.15 3.440 17.02   8
## Valiant             2.76 3.460 20.22   6
## Duster 360          3.21 3.570 15.84   8
## Merc 240D           3.69 3.190 20.00   4
## Merc 230            3.92 3.150 22.90   4
## Merc 280            3.92 3.440 18.30   6
## Merc 280C           3.92 3.440 18.90   6
## Merc 450SE          3.07 4.070 17.40   8
## Merc 450SL          3.07 3.730 17.60   8
## Merc 450SLC         3.07 3.780 18.00   8
## Cadillac Fleetwood  2.93 5.250 17.98   8
## Lincoln Continental 3.00 5.424 17.82   8
## Chrysler Imperial   3.23 5.345 17.42   8
## Fiat 128            4.08 2.200 19.47   4
## Honda Civic         4.93 1.615 18.52   4
## Toyota Corolla      4.22 1.835 19.90   4
## Toyota Corona       3.70 2.465 20.01   4
## Dodge Challenger    2.76 3.520 16.87   8
## AMC Javelin         3.15 3.435 17.30   8
## Camaro Z28          3.73 3.840 15.41   8
## Pontiac Firebird    3.08 3.845 17.05   8
## Fiat X1-9           4.08 1.935 18.90   4
## Porsche 914-2       4.43 2.140 16.70   4
## Lotus Europa        3.77 1.513 16.90   4
## Ford Pantera L      4.22 3.170 14.50   8
## Ferrari Dino        3.62 2.770 15.50   6
## Maserati Bora       3.54 3.570 14.60   8
## Volvo 142E          4.11 2.780 18.60   4
# choosing the specific variable names
select(mtcars,hp,wt,mpg,gear,cyl)
##                      hp    wt  mpg gear cyl
## Mazda RX4           110 2.620 21.0    4   6
## Mazda RX4 Wag       110 2.875 21.0    4   6
## Datsun 710           93 2.320 22.8    4   4
## Hornet 4 Drive      110 3.215 21.4    3   6
## Hornet Sportabout   175 3.440 18.7    3   8
## Valiant             105 3.460 18.1    3   6
## Duster 360          245 3.570 14.3    3   8
## Merc 240D            62 3.190 24.4    4   4
## Merc 230             95 3.150 22.8    4   4
## Merc 280            123 3.440 19.2    4   6
## Merc 280C           123 3.440 17.8    4   6
## Merc 450SE          180 4.070 16.4    3   8
## Merc 450SL          180 3.730 17.3    3   8
## Merc 450SLC         180 3.780 15.2    3   8
## Cadillac Fleetwood  205 5.250 10.4    3   8
## Lincoln Continental 215 5.424 10.4    3   8
## Chrysler Imperial   230 5.345 14.7    3   8
## Fiat 128             66 2.200 32.4    4   4
## Honda Civic          52 1.615 30.4    4   4
## Toyota Corolla       65 1.835 33.9    4   4
## Toyota Corona        97 2.465 21.5    3   4
## Dodge Challenger    150 3.520 15.5    3   8
## AMC Javelin         150 3.435 15.2    3   8
## Camaro Z28          245 3.840 13.3    3   8
## Pontiac Firebird    175 3.845 19.2    3   8
## Fiat X1-9            66 1.935 27.3    4   4
## Porsche 914-2        91 2.140 26.0    5   4
## Lotus Europa        113 1.513 30.4    5   4
## Ford Pantera L      264 3.170 15.8    5   8
## Ferrari Dino        175 2.770 19.7    5   6
## Maserati Bora       335 3.570 15.0    5   8
## Volvo 142E          109 2.780 21.4    4   4
filter(mtcars,mpg<21 & cyl==6)
##               mpg cyl  disp  hp drat   wt  qsec vs am gear carb
## Valiant      18.1   6 225.0 105 2.76 3.46 20.22  1  0    3    1
## Merc 280     19.2   6 167.6 123 3.92 3.44 18.30  1  0    4    4
## Merc 280C    17.8   6 167.6 123 3.92 3.44 18.90  1  0    4    4
## Ferrari Dino 19.7   6 145.0 175 3.62 2.77 15.50  0  1    5    6
# choosing the variable names alternate
select(mtcars,disp:vs,carb)
##                      disp  hp drat    wt  qsec vs carb
## Mazda RX4           160.0 110 3.90 2.620 16.46  0    4
## Mazda RX4 Wag       160.0 110 3.90 2.875 17.02  0    4
## Datsun 710          108.0  93 3.85 2.320 18.61  1    1
## Hornet 4 Drive      258.0 110 3.08 3.215 19.44  1    1
## Hornet Sportabout   360.0 175 3.15 3.440 17.02  0    2
## Valiant             225.0 105 2.76 3.460 20.22  1    1
## Duster 360          360.0 245 3.21 3.570 15.84  0    4
## Merc 240D           146.7  62 3.69 3.190 20.00  1    2
## Merc 230            140.8  95 3.92 3.150 22.90  1    2
## Merc 280            167.6 123 3.92 3.440 18.30  1    4
## Merc 280C           167.6 123 3.92 3.440 18.90  1    4
## Merc 450SE          275.8 180 3.07 4.070 17.40  0    3
## Merc 450SL          275.8 180 3.07 3.730 17.60  0    3
## Merc 450SLC         275.8 180 3.07 3.780 18.00  0    3
## Cadillac Fleetwood  472.0 205 2.93 5.250 17.98  0    4
## Lincoln Continental 460.0 215 3.00 5.424 17.82  0    4
## Chrysler Imperial   440.0 230 3.23 5.345 17.42  0    4
## Fiat 128             78.7  66 4.08 2.200 19.47  1    1
## Honda Civic          75.7  52 4.93 1.615 18.52  1    2
## Toyota Corolla       71.1  65 4.22 1.835 19.90  1    1
## Toyota Corona       120.1  97 3.70 2.465 20.01  1    1
## Dodge Challenger    318.0 150 2.76 3.520 16.87  0    2
## AMC Javelin         304.0 150 3.15 3.435 17.30  0    2
## Camaro Z28          350.0 245 3.73 3.840 15.41  0    4
## Pontiac Firebird    400.0 175 3.08 3.845 17.05  0    2
## Fiat X1-9            79.0  66 4.08 1.935 18.90  1    1
## Porsche 914-2       120.3  91 4.43 2.140 16.70  0    2
## Lotus Europa         95.1 113 3.77 1.513 16.90  1    2
## Ford Pantera L      351.0 264 4.22 3.170 14.50  0    4
## Ferrari Dino        145.0 175 3.62 2.770 15.50  0    6
## Maserati Bora       301.0 335 3.54 3.570 14.60  0    8
## Volvo 142E          121.0 109 4.11 2.780 18.60  1    2
# except the specific variable names columns
select(mtcars,-cyl,-mpg,-hp,-carb)
##                      disp drat    wt  qsec vs am gear
## Mazda RX4           160.0 3.90 2.620 16.46  0  1    4
## Mazda RX4 Wag       160.0 3.90 2.875 17.02  0  1    4
## Datsun 710          108.0 3.85 2.320 18.61  1  1    4
## Hornet 4 Drive      258.0 3.08 3.215 19.44  1  0    3
## Hornet Sportabout   360.0 3.15 3.440 17.02  0  0    3
## Valiant             225.0 2.76 3.460 20.22  1  0    3
## Duster 360          360.0 3.21 3.570 15.84  0  0    3
## Merc 240D           146.7 3.69 3.190 20.00  1  0    4
## Merc 230            140.8 3.92 3.150 22.90  1  0    4
## Merc 280            167.6 3.92 3.440 18.30  1  0    4
## Merc 280C           167.6 3.92 3.440 18.90  1  0    4
## Merc 450SE          275.8 3.07 4.070 17.40  0  0    3
## Merc 450SL          275.8 3.07 3.730 17.60  0  0    3
## Merc 450SLC         275.8 3.07 3.780 18.00  0  0    3
## Cadillac Fleetwood  472.0 2.93 5.250 17.98  0  0    3
## Lincoln Continental 460.0 3.00 5.424 17.82  0  0    3
## Chrysler Imperial   440.0 3.23 5.345 17.42  0  0    3
## Fiat 128             78.7 4.08 2.200 19.47  1  1    4
## Honda Civic          75.7 4.93 1.615 18.52  1  1    4
## Toyota Corolla       71.1 4.22 1.835 19.90  1  1    4
## Toyota Corona       120.1 3.70 2.465 20.01  1  0    3
## Dodge Challenger    318.0 2.76 3.520 16.87  0  0    3
## AMC Javelin         304.0 3.15 3.435 17.30  0  0    3
## Camaro Z28          350.0 3.73 3.840 15.41  0  0    3
## Pontiac Firebird    400.0 3.08 3.845 17.05  0  0    3
## Fiat X1-9            79.0 4.08 1.935 18.90  1  1    4
## Porsche 914-2       120.3 4.43 2.140 16.70  0  1    5
## Lotus Europa         95.1 3.77 1.513 16.90  1  1    5
## Ford Pantera L      351.0 4.22 3.170 14.50  0  1    5
## Ferrari Dino        145.0 3.62 2.770 15.50  0  1    5
## Maserati Bora       301.0 3.54 3.570 14.60  0  1    5
## Volvo 142E          121.0 4.11 2.780 18.60  1  1    4
# variable names starts with d

select(mtcars,starts_with("d"))
##                      disp drat
## Mazda RX4           160.0 3.90
## Mazda RX4 Wag       160.0 3.90
## Datsun 710          108.0 3.85
## Hornet 4 Drive      258.0 3.08
## Hornet Sportabout   360.0 3.15
## Valiant             225.0 2.76
## Duster 360          360.0 3.21
## Merc 240D           146.7 3.69
## Merc 230            140.8 3.92
## Merc 280            167.6 3.92
## Merc 280C           167.6 3.92
## Merc 450SE          275.8 3.07
## Merc 450SL          275.8 3.07
## Merc 450SLC         275.8 3.07
## Cadillac Fleetwood  472.0 2.93
## Lincoln Continental 460.0 3.00
## Chrysler Imperial   440.0 3.23
## Fiat 128             78.7 4.08
## Honda Civic          75.7 4.93
## Toyota Corolla       71.1 4.22
## Toyota Corona       120.1 3.70
## Dodge Challenger    318.0 2.76
## AMC Javelin         304.0 3.15
## Camaro Z28          350.0 3.73
## Pontiac Firebird    400.0 3.08
## Fiat X1-9            79.0 4.08
## Porsche 914-2       120.3 4.43
## Lotus Europa         95.1 3.77
## Ford Pantera L      351.0 4.22
## Ferrari Dino        145.0 3.62
## Maserati Bora       301.0 3.54
## Volvo 142E          121.0 4.11
# variable names contain with A
select(mtcars,contains("A",ignore.case = TRUE))
##                     drat am gear carb
## Mazda RX4           3.90  1    4    4
## Mazda RX4 Wag       3.90  1    4    4
## Datsun 710          3.85  1    4    1
## Hornet 4 Drive      3.08  0    3    1
## Hornet Sportabout   3.15  0    3    2
## Valiant             2.76  0    3    1
## Duster 360          3.21  0    3    4
## Merc 240D           3.69  0    4    2
## Merc 230            3.92  0    4    2
## Merc 280            3.92  0    4    4
## Merc 280C           3.92  0    4    4
## Merc 450SE          3.07  0    3    3
## Merc 450SL          3.07  0    3    3
## Merc 450SLC         3.07  0    3    3
## Cadillac Fleetwood  2.93  0    3    4
## Lincoln Continental 3.00  0    3    4
## Chrysler Imperial   3.23  0    3    4
## Fiat 128            4.08  1    4    1
## Honda Civic         4.93  1    4    2
## Toyota Corolla      4.22  1    4    1
## Toyota Corona       3.70  0    3    1
## Dodge Challenger    2.76  0    3    2
## AMC Javelin         3.15  0    3    2
## Camaro Z28          3.73  0    3    4
## Pontiac Firebird    3.08  0    3    2
## Fiat X1-9           4.08  1    4    1
## Porsche 914-2       4.43  1    5    2
## Lotus Europa        3.77  1    5    2
## Ford Pantera L      4.22  1    5    4
## Ferrari Dino        3.62  1    5    6
## Maserati Bora       3.54  1    5    8
## Volvo 142E          4.11  1    4    2
library("tidyverse")
view(iris)
View(iris)
iris %>% summarise(mean(Sepal.Length))
##   mean(Sepal.Length)
## 1           5.843333
getwd()
## [1] "C:/Users/maniv/Documents/R practice"
iris %>% pull(Sepal.Length) %>% mean()
## [1] 5.843333
library(tibble)

iris$Sepal.Length %>% mean()
## [1] 5.843333
iris %>% pull(Sepal.Length) %>% mean()
## [1] 5.843333
